{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf460
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /* Nima Kian\
   4/1/16\
QuizTime.java\
*/\
\
import java.awt.BorderLayout;\
import java.awt.CardLayout;\
import java.awt.EventQueue;\
import java.awt.FlowLayout;\
import java.awt.GridBagConstraints;\
import java.awt.GridBagLayout;\
import java.awt.event.ActionEvent;\
import java.awt.event.ActionListener;\
import java.util.ArrayList;\
import java.util.Arrays;\
import java.util.Collections;\
import java.util.List;\
import java.util.Enumeration;\
import javax.swing.ButtonGroup;\
import javax.swing.JButton;\
import javax.swing.JFrame;\
import javax.swing.JLabel;\
import javax.swing.JPanel;\
import javax.swing.JOptionPane;\
import javax.swing.JRadioButton;\
import javax.swing.UIManager;\
import javax.swing.UnsupportedLookAndFeelException;\
import javax.swing.border.EmptyBorder;\
\
//Main class\
public class QuizTime \{\
  \
  //Main Method\
  public static void main(String[] args) \{\
    new QuizTime();\
  \}\
  \
//Create new frame\
//Run a UIManager to change the look and feel of the buttons and Jframe\
//Add the list of questions to Jframe\
  public QuizTime() \{\
    EventQueue.invokeLater(new Runnable() \{\
      @Override\
      public void run() \{\
        try \{\
          UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());\
        \} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) \{\
          ex.printStackTrace();\
        \}\
        \
        List<Question> quiz = new ArrayList<>(5);\
        quiz.add(new ChoiceQuestion("Where is Japan Located?", "Asia", "North America", "Africa", "Europe", "Asia"));\
        quiz.add(new ChoiceQuestion("In what year was the U.S. Constitution Written?", "1787", "1790", "1788", "1787" , "1789"));\
        quiz.add(new ChoiceQuestion("What does the Roman Number 'L' Stand for?", "50", "100", "150", "200", "50"));\
        quiz.add(new ChoiceQuestion("What is the smallest state in the United States", "Rhode Island", "Connecticut", "Delware", "Rhode Island", "New Jersey"));\
        quiz.add(new ChoiceQuestion("What is a meteor called when it reaches earth?", "Meteorite", "Meteorite", "A rock", "Shooting Star", "A comet"));\
        quiz.add(new ChoiceQuestion("Which of the following is a mammal?", "Platypus", "Frog", "Dinosaur", "Platypus", "Alligator"));\
        quiz.add(new ChoiceQuestion("Who wrote the famous chinese military treatise know as 'The Art of War'?", "Sun Tzu", "Gou Ziyi", "Sun Tzu", "Li Guang", "Xiang Yu"));\
        quiz.add(new ChoiceQuestion("What animal is the symbol of the U.S. Democratic Party?", "Donkey", "Horse", "Elephant", "Donkey", "Dog"));\
        \
        \
        JFrame frame = new JFrame("QUIZ TIME!");\
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\
        frame.add(new QuizPane(quiz));\
        frame.pack();\
        frame.setLocationRelativeTo(null);\
        frame.setVisible(true);\
      \}\
    \});\
  \}\
  \
//Create Quiz\
//next and intro buttons along with the Panel\
//Main Panel you will see on startup and after the quiz has finished\
  public class QuizPane extends JPanel \{\
    \
    private List<Question> quiz;\
    \
    private JButton next;\
    private JButton intro;\
    private JLabel score;\
    \
    private CardLayout cardLayout;\
    private int currentQuestion;\
    private int totalCorrect;\
    \
    private JPanel QuestionsPanel;\
    \
    public QuizPane(List<Question> quiz) \{\
      this.quiz = quiz;\
      cardLayout = new CardLayout();\
      QuestionsPanel = new JPanel(cardLayout);\
      QuestionsPanel.setBorder(new EmptyBorder(40,45,40,45));\
      \
      JButton start = new JButton("Start");\
      start.addActionListener(new ActionListener() \{\
        @Override\
        public void actionPerformed(ActionEvent e) \{\
          currentQuestion = -1;\
          nextQuestion();\
          \
        \}\
      \});\
      \
      JButton intro = new JButton("Instructions");\
      intro.addActionListener(new ActionListener() \{\
        @Override\
        public void actionPerformed(ActionEvent e) \{\
          instructionBox();\
        \}\
      \});\
      \
      JPanel mainPanel = new JPanel(new GridBagLayout());\
      mainPanel.add(start);\
      mainPanel.add(intro);\
      QuestionsPanel.add(mainPanel, "start");\
      \
      for (int index = 0; index < quiz.size(); index++) \{\
        Question question = quiz.get(index);\
        QuestionPane pane = new QuestionPane(question);\
        question.setButtonGroup(pane.getButtonGroup());\
        QuestionsPanel.add(pane, Integer.toString(index));\
      \}\
      /*QuestionsPanel.add(new JLabel(""), "last");*/\
      score = new JLabel("Your score is: " + totalCorrect +"/50");\
      QuestionsPanel.add(score, "last");\
      currentQuestion = 0;\
      cardLayout.show(QuestionsPanel, "Start");\
      \
      setLayout(new BorderLayout());\
      add(QuestionsPanel);\
      \
      JPanel buttonPane = new JPanel(new FlowLayout(FlowLayout.RIGHT));\
      next = new JButton("Next");\
      buttonPane.add(next);\
      next.setEnabled(false);\
      \
      add(buttonPane, BorderLayout.SOUTH);\
      \
      next.addActionListener(new ActionListener() \{\
        @Override\
        public void actionPerformed(ActionEvent e) \{\
          nextQuestion();\
        \}\
      \});\
    \}\
    \
    //Method that handles all of the current logic, takes the user input and checks if correct prints score\
    //First checks if there are still any questions left in the quiz if false it will do the above if\
    //there are still questions then it will allow you to go to the next question and function as normal\
    protected void nextQuestion() \{\
      // store the selected answer for each question\
      if (currentQuestion >= 0 && currentQuestion < quiz.size() ) \{\
        Question currentQObject = quiz.get(currentQuestion);\
        if (currentQObject != null) \{\
          currentQObject.setUserResponse(getSelected(currentQObject.getButtonGroup()));\
        \}\
      \}\
      currentQuestion++;\
      if (currentQuestion >= quiz.size()) \{\
        cardLayout.show(QuestionsPanel, "last");\
        next.setEnabled(false);\
        \
        // Just iterate over quiz list to check if answers are correct:\
        //int totalCorrect = 0;\
        for (Question q : quiz) \{\
          if (q.isCorrect()) \{ \
            totalCorrect++;\
          \}\
        \}\
        \
        //Print the answers correct \
        System.out.println("Your score is:" + totalCorrect + "/50");\
        \
      \} else \{\
        cardLayout.show(QuestionsPanel, Integer.toString(currentQuestion));\
        next.setText("Next");\
        next.setEnabled(true);\
      \}\
    \}\
    \
    private String getSelected(ButtonGroup buttonGroup) \{\
      JRadioButton selectedRadio = null;\
      Enumeration e = buttonGroup.getElements();\
      while (e.hasMoreElements()) \{\
        JRadioButton rad = (JRadioButton) e.nextElement();\
        if (rad.isSelected()) \{\
          selectedRadio = rad;\
          break;\
        \}\
      \}\
      return selectedRadio.getText();\
    \}\
    \
    protected void instructionBox() \{\
      JOptionPane.showMessageDialog(null,"<html><b><div width='111px' height = '82px' align='justified'> 1. A quiz composed of 50 questions, You must answer the previous question for moving on to the next one. Good Luck!</div></body></html>",\
                                    "Instructions",\
                                    JOptionPane.INFORMATION_MESSAGE);\
    \}\
  \}\
  \
  //Inface Question \
  //complete group of methods\
  public interface Question \{\
    \
    public String getPrompt();\
    \
    public void setButtonGroup(ButtonGroup buttonGroup);\
    \
    public ButtonGroup getButtonGroup();\
    \
    public String getCorrectAnswer();\
    \
    public String[] getOptions();\
    \
    public String getUserResponse();\
    \
    public void setUserResponse(String response);\
    \
    public boolean isCorrect();\
  \}\
  \
  //Class where methods will be given some logic\
  public class ChoiceQuestion implements Question \{\
    \
    private final String prompt;\
    private final String correctAnswer;\
    private final String[] options;\
    private ButtonGroup buttonGroup;\
    \
    private String userResponse;\
    \
    public ChoiceQuestion(String prompt, String correctAnswer, String... options) \{\
      this.prompt = prompt;\
      this.correctAnswer = correctAnswer;\
      this.options = options;\
    \}\
    \
    @Override\
    public void setButtonGroup(ButtonGroup buttonGroup) \{\
      this.buttonGroup = buttonGroup;\
    \}\
    \
    @Override\
    public ButtonGroup getButtonGroup() \{\
      return this.buttonGroup;\
    \}\
    \
    @Override\
    public String getPrompt() \{\
      return prompt;\
    \}\
    \
    @Override\
    public String getCorrectAnswer() \{\
      return correctAnswer;\
    \}\
    \
    @Override\
    public String[] getOptions() \{\
      return options;\
    \}\
    \
    @Override\
    public String getUserResponse() \{\
      return userResponse;\
    \}\
    \
    @Override\
    public void setUserResponse(String response) \{\
      userResponse = response;\
    \}\
    \
    @Override\
    public boolean isCorrect() \{\
      return getCorrectAnswer().equals(getUserResponse());\
    \}\
  \}\
  \
  //Pane when taking the quiz\
  public class QuestionPane extends JPanel \{\
    \
    private Question question;\
    \
    private ButtonGroup buttonGroup = null;\
    \
    public QuestionPane(Question question) \{\
      this.question = question;\
      \
      setLayout(new BorderLayout());\
      \
      JLabel prompt = new JLabel("<html><b>" + question.getPrompt() + "</b></html>");\
      prompt.setHorizontalAlignment(JLabel.LEFT);\
      \
      add(prompt, BorderLayout.NORTH);\
      \
      JPanel guesses = new JPanel(new GridBagLayout());\
      guesses.setBorder(new EmptyBorder(10,10,10,10));\
      GridBagConstraints gbc = new GridBagConstraints();\
      gbc.gridwidth = GridBagConstraints.REMAINDER;\
      gbc.weightx = 1;\
      gbc.anchor = GridBagConstraints.WEST;\
      \
      List<String> options = new ArrayList<>(Arrays.asList(question.getOptions()));\
      Collections.sort(options);\
      \
      ButtonGroup bg = new ButtonGroup();\
      for (String option : options) \{\
        JRadioButton btn = new JRadioButton(option);\
        btn.setName(option);\
        bg.add(btn);\
        \
        guesses.add(btn, gbc);\
      \}\
      this.buttonGroup = bg;\
      \
      add(guesses);\
    \}\
    \
    public ButtonGroup getButtonGroup() \{\
      return buttonGroup;\
    \}\
    \
    public Question getQuestion() \{\
      return question;\
    \}\
    \
    public class ActionHandler implements ActionListener \{\
      \
      @Override\
      public void actionPerformed(ActionEvent e) \{\
        getQuestion().setUserResponse(e.getActionCommand());\
      \}\
      \
    \}\
    \
  \}\
\}}